---
import Layout from "../layouts/Layout.astro";
import tourismeText from "../assets/datatourisme-tour2.json?raw";
import departementsText from "../assets/departements.geojson?raw";
import garesText from "../assets/gares-de-voyageurs2.geojson?raw";

const tourismeData = JSON.parse(tourismeText);
const departementsData = JSON.parse(departementsText);
const garesData = JSON.parse(garesText);
---

<Layout>
  <main class="min-h-screen bg-gradient-to-b from-[#f9f8f6] to-white">
    <!-- Hero Section -->
    <div
      class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-12 sm:pt-16 pb-8 sm:pb-12"
    >
      <div class="text-center mb-8 sm:mb-12">
        <h1
          class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-4 tracking-tight"
        >
          Culture & Mobilité
        </h1>
        <p
          class="text-base sm:text-lg lg:text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed px-4"
        >
          Découvrez comment le réseau ferroviaire français dessert notre
          patrimoine culturel
        </p>
      </div>

      <!-- Introduction -->
      <div
        class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 sm:p-8 mb-6 sm:mb-8"
      >
        <p class="text-gray-700 leading-relaxed text-base sm:text-lg">
          Cette carte interactive révèle la relation entre <span
            class="font-semibold text-gray-900">gares SNCF</span
          > et
          <span class="font-semibold text-gray-900">sites culturels</span>.
          Explorez la proximité des lieux emblématiques avec le réseau
          ferroviaire et imaginez vos prochaines escapades en train.
        </p>
      </div>
    </div>

    <!-- Map Container with Filter -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12 sm:pb-16">
      <div
        class="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden"
      >
        <!-- Filter Section (au-dessus de la carte) -->
        <div
          class="border-b border-gray-200 bg-[#f9f8f6] px-4 sm:px-6 py-4 sm:py-5"
        >
          <div
            class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4"
          >
            <label for="affichage" class="text-sm font-medium text-gray-700">
              Affichage de la carte
            </label>
            <select
              id="affichage"
              class="w-full sm:w-auto px-4 py-2.5 sm:py-3 border-2 border-gray-300 rounded-xl text-gray-700 font-medium
                     focus:border-gray-900 focus:ring-2 focus:ring-gray-900/10 focus:outline-none
                     transition-all cursor-pointer hover:border-gray-400 bg-white"
            >
              <option value="both" selected>Gares + Lieux touristiques</option>
              <option value="gares">Gares uniquement</option>
              <option value="tourisme">Lieux touristiques uniquement</option>
            </select>
          </div>
        </div>

        <!-- Map with Legend -->
        <div class="relative bg-gray-50">
          <!-- Legend -->
          <div
            id="map-legend"
            class="absolute top-3 left-3 sm:top-4 sm:left-4 bg-white/95 backdrop-blur-md border border-gray-300
                   rounded-xl shadow-lg px-3 py-2.5 sm:px-4 sm:py-3 z-10 flex flex-col gap-1.5 sm:gap-2"
          >
            <div class="flex items-center gap-2 sm:gap-3">
              <span
                class="text-red-500 text-lg sm:text-xl leading-none font-bold"
                >▲</span
              >
              <span class="text-xs sm:text-sm font-medium text-gray-700"
                >Lieux culturels</span
              >
            </div>
            <div class="flex items-center gap-2 sm:gap-3">
              <span
                class="text-blue-600 text-lg sm:text-xl leading-none font-bold"
                >●</span
              >
              <span class="text-xs sm:text-sm font-medium text-gray-700"
                >Gares SNCF</span
              >
            </div>
          </div>
          <div
            id="map-container"
            class="flex items-center justify-center min-h-[500px] sm:min-h-[700px] lg:min-h-[800px]"
            data-tourisme={JSON.stringify(tourismeData)}
            data-departements={JSON.stringify(departementsData)}
            data-gares={JSON.stringify(garesData)}
          >
          </div>
        </div>
      </div>

      <div class="grid sm:grid-cols-2 gap-4 sm:gap-6 mt-6 sm:mt-8">
        <div
          class="bg-gradient-to-br from-[#f9f8f6] to-white rounded-2xl p-6 sm:p-8 border border-gray-200 hover:shadow-md transition-shadow"
        >
          <div
            class="w-10 h-10 sm:w-12 sm:h-12 bg-gray-900 rounded-xl flex items-center justify-center mb-3 sm:mb-4"
          >
            <svg
              class="w-5 h-5 sm:w-6 sm:h-6 text-white"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
          <h3
            class="text-lg sm:text-xl font-semibold text-gray-900 mb-2 sm:mb-3"
          >
            Interactivité
          </h3>
          <p class="text-sm sm:text-base text-gray-600 leading-relaxed">
            Survolez chaque point pour découvrir les détails : nom du site,
            catégorie, commune, et surtout la gare la plus proche avec sa
            distance en kilomètres.
          </p>
        </div>

        <div
          class="bg-gradient-to-br from-[#f9f8f6] to-white rounded-2xl p-6 sm:p-8 border border-gray-200 hover:shadow-md transition-shadow"
        >
          <div
            class="w-10 h-10 sm:w-12 sm:h-12 bg-gray-900 rounded-xl flex items-center justify-center mb-3 sm:mb-4"
          >
            <svg
              class="w-5 h-5 sm:w-6 sm:h-6 text-white"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"
              ></path>
            </svg>
          </div>
          <h3
            class="text-lg sm:text-xl font-semibold text-gray-900 mb-2 sm:mb-3"
          >
            Accessibilité culturelle
          </h3>
          <p class="text-sm sm:text-base text-gray-600 leading-relaxed">
            Malgré une densité de gares limitée sur certains territoires, la
            majorité des sites culturels restent accessibles par le train,
            ouvrant la voie à un tourisme décarboné.
          </p>
        </div>
      </div>
      <div
        class="bg-gradient-to-r from-gray-900 to-gray-800 rounded-2xl p-6 sm:p-10 mt-6 sm:mt-8 text-white"
      >
        <h2 class="text-xl sm:text-2xl font-bold mb-3 sm:mb-4">
          Le patrimoine à portée de rail
        </h2>
        <p
          class="text-gray-200 leading-relaxed text-sm sm:text-base lg:text-lg mb-4 sm:mb-6"
        >
          Cette visualisation démontre que le réseau ferroviaire français, fruit
          d'une longue histoire, continue d'offrir une réelle opportunité pour
          découvrir notre patrimoine culturel sans voiture. Les distances entre
          gares et sites d'intérêt restent raisonnables, permettant d'envisager
          des trajets combinant train et mobilité douce.
        </p>
        <div
          class="flex items-center gap-2 text-gray-300 font-medium text-sm sm:text-base"
        >
      </div>
    </div>
  </main>

  <script type="module">
    import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

    const el = document.getElementById("map-container");
    const select = document.getElementById("affichage");

    const data = JSON.parse(el.dataset.tourisme || "[]");
    const departements = JSON.parse(el.dataset.departements || "{}");
    const gares = JSON.parse(el.dataset.gares || "{}");

    let lieux = data
      .map((d) => ({
        nom: d.Nom_du_POI || d.Nom_du_POT || d.nom || "Lieu touristique",
        categorie: d.Categorie || "Non renseigné",
        commune: d.Commune || "Inconnue",
        code_postal: d.Code_postal || "",
        lon: +d.Longitude || +d["coordonnees.lon"] || +d["Coordonnées.lon"],
        lat: +d.Latitude || +d["coordonnees.lat"] || +d["Coordonnées.lat"],
      }))
      .filter(
        (d) =>
          d.lat && d.lon && d.lat > 41 && d.lat < 52 && d.lon > -6 && d.lon < 10
      );

    const garesClean = (gares.features || [])
      .filter(
        (f) =>
          f.geometry &&
          f.geometry.type === "Point" &&
          Array.isArray(f.geometry.coordinates)
      )
      .map((f) => ({
        nom: f.properties?.nom || f.properties?.NOM_GARE || "Gare",
        lon: f.geometry.coordinates[0],
        lat: f.geometry.coordinates[1],
      }))
      .filter(
        (d) =>
          d.lat && d.lon && d.lat > 41 && d.lat < 52 && d.lon > -6 && d.lon < 10
      );

    function distanceKm(lat1, lon1, lat2, lon2) {
      const R = 6371;
      const dLat = ((lat2 - lat1) * Math.PI) / 180;
      const dLon = ((lon2 - lon1) * Math.PI) / 180;
      const a =
        Math.sin(dLat / 2) ** 2 +
        Math.cos((lat1 * Math.PI) / 180) *
          Math.cos((lat2 * Math.PI) / 180) *
          Math.sin(dLon / 2) ** 2;
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    lieux = lieux.map((lieu) => {
      let closest = null;
      let minDistance = Infinity;
      for (const gare of garesClean) {
        const dist = distanceKm(lieu.lat, lieu.lon, gare.lat, gare.lon);
        if (dist < minDistance) {
          minDistance = dist;
          closest = gare;
        }
      }
      return {
        ...lieu,
        gare_proche: closest ? closest.nom : "Aucune gare trouvée",
        distance_gare: minDistance.toFixed(1),
      };
    });

    function renderMap(mode = "both") {
      el.innerHTML = "";

      const marks = [
        Plot.geo(departements, {
          fill: "#f9fafb",
          stroke: "#bfc6cd",
          strokeWidth: 0.5,
        }),
      ];

      if (mode === "both" || mode === "tourisme") {
        marks.push(
          Plot.dot(lieux, {
            x: "lon",
            y: "lat",
            r: 2.2,
            fill: "#e63946",
            symbol: "triangle",
            opacity: 0.8,
            stroke: "white",
            strokeWidth: 0.3,
            title: (d) =>
              `📍 ${d.nom}\n${d.categorie}\n${d.commune} (${d.code_postal})\n\nGare la plus proche : ${d.gare_proche}\nDistance : ${d.distance_gare} km`,
          })
        );
      }

      if (mode === "both" || mode === "gares") {
        marks.push(
          Plot.dot(garesClean, {
            x: "lon",
            y: "lat",
            r: 2,
            fill: "#0077b6",
            opacity: 0.8,
            stroke: "white",
            strokeWidth: 0.3,
            title: (d) => `🚉 Gare : ${d.nom}`,
          })
        );
      }

      const width = Math.min(window.innerWidth - 32, 1400);

      const map = Plot.plot({
        width: width,
        height:
          window.innerWidth < 640 ? 500 : window.innerWidth < 1024 ? 700 : 800,
        projection: { type: "mercator", domain: departements },
        inset: 8,
        marks,
        style: { background: "#ffffff" },
      });

      el.append(map);
    }

    renderMap("both");
    select.addEventListener("change", (e) => renderMap(e.target.value));

    window.addEventListener("resize", () => {
      renderMap(select.value);
    });
  </script>
</Layout>
