---
import Layout from "../layouts/Layout.astro";
import tourismeText from "../assets/datatourisme-tour2.json?raw";
import departementsText from "../assets/departements.geojson?raw";
import garesText from "../assets/gares-de-voyageurs2.geojson?raw";

const tourismeData = JSON.parse(tourismeText);
const departementsData = JSON.parse(departementsText);
const garesData = JSON.parse(garesText);
const lieux = tourismeData

  .map((d) => ({
    nom: d.Nom_du_POI || d.Nom_du_POT || d.nom || "Lieu touristique",
    categorie: d.Categorie || "Non renseign√©",
    commune: d.Commune || "Inconnue",
    code_postal: d.Code_postal || "",
    lon: +d.Longitude || +d["coordonnees.lon"] || +d["Coordonn√©es.lon"],
    lat: +d.Latitude || +d["coordonnees.lat"] || +d["Coordonn√©es.lat"],
  }))
  .filter(
    (d) =>
      d.lat && d.lon && d.lat > 41 && d.lat < 52 && d.lon > -6 && d.lon < 10
  );

const garesClean = (garesData.features || [])
  .filter(
    (f) =>
      f.geometry &&
      f.geometry.type === "Point" &&
      Array.isArray(f.geometry.coordinates)
  )
  .map((f) => ({
    nom: f.properties?.nom || f.properties?.NOM_GARE || "Gare",
    lon: f.geometry.coordinates[0],
    lat: f.geometry.coordinates[1],
  }))
  .filter(
    (d) =>
      d.lat && d.lon && d.lat > 41 && d.lat < 52 && d.lon > -6 && d.lon < 10
  );
---

<Layout>
  <link
    slot="head"
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  />
  <link
    slot="head"
    rel="stylesheet"
    href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css"
  />
  <link
    slot="head"
    rel="stylesheet"
    href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css"
  />

  <main class="max-w-7xl mx-auto p-8">
    <h1 class="text-3xl font-bold mb-2 text-gray-900">
      Lieux touristiques et gares en France
    </h1>
    <p class="text-gray-600 mb-6">
      {garesClean.length} gares et {lieux.length} lieux touristiques
    </p>
    <p>
        Cette carte interactive vous permet de rechercher les gares et les lieux touristiques aux alentours. Utilisez le menu d√©roulant pour choisir d'afficher uniquement les gares, uniquement les lieux touristiques, ou les deux simultan√©ment.
    </p>

    <div class="grid md:grid-cols-2 gap-4 mb-6">
      <div class="bg-white rounded-lg shadow-md p-4">
        <label for="affichage" class="block mb-2 font-medium text-gray-700">
          √âl√©ments √† afficher :
        </label>
        <select
          id="affichage"
          class="w-full border-2 border-gray-200 rounded-lg px-3 py-2 focus:border-indigo-500 focus:outline-none"
        >
          <option value="both" selected>Gares + Lieux touristiques</option>
          <option value="gares">Gares uniquement</option>
          <option value="tourisme">Lieux touristiques uniquement</option>
        </select>
      </div>
    </div>

    <div
      class="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100"
    >
      <div id="map" style="height: 700px; width: 100%;"></div>
    </div>

    <div
      class="mt-4 bg-white rounded-lg shadow-md p-4 flex gap-6 justify-center text-sm"
    >
      <div class="flex items-center gap-2">
        <span class="text-red-500 text-xl">‚ñ≤</span>
        <span class="text-gray-700">Lieux touristiques</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-blue-600 text-xl">‚óè</span>
        <span class="text-gray-700">Gares</span>
      </div>
    </div>
  </main>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" is:inline
  ></script>
  <script
    src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"
    is:inline></script>

  <script define:vars={{ lieux, garesClean }}>
    document.addEventListener("DOMContentLoaded", function () {
      console.log(` ${lieux.length} lieux touristiques`);
      console.log(` ${garesClean.length} gares`);

      let map;
      let garesLayer = L.markerClusterGroup({ maxClusterRadius: 40 });
      let lieuxLayer = L.markerClusterGroup({ maxClusterRadius: 40 });
      let highlightMarker = null;

      map = L.map("map").setView([46.603354, 1.888334], 6);

      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "¬© OpenStreetMap",
        maxZoom: 19,
      }).addTo(map);

      const gareIcon = L.icon({
        iconUrl:
          "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png",
        shadowUrl:
          "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png",
        iconSize: [20, 33],
        iconAnchor: [10, 33],
        popupAnchor: [0, -28],
        shadowSize: [33, 33],
      });

      const tourismeIcon = L.icon({
        iconUrl:
          "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png",
        shadowUrl:
          "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png",
        iconSize: [20, 33],
        iconAnchor: [10, 33],
        popupAnchor: [0, -28],
        shadowSize: [33, 33],
      });
      garesClean.forEach((gare) => {
        const marker = L.marker([gare.lat, gare.lon], { icon: gareIcon });
        marker.bindPopup(`
          <div style="padding: 8px;">
            <div style="font-weight: bold; margin-bottom: 4px;">üöâ ${gare.nom}</div>
          </div>
        `);
        garesLayer.addLayer(marker);
      });

      lieux.forEach((lieu) => {
        const marker = L.marker([lieu.lat, lieu.lon], { icon: tourismeIcon });
        marker.bindPopup(`
          <div style="padding: 10px; min-width: 200px;">
            <div style="font-weight: bold; font-size: 15px; margin-bottom: 6px;">üìç ${lieu.nom}</div>
            <div style="font-size: 13px; color: #6b7280;">
              <div><b>Cat√©gorie:</b> ${lieu.categorie}</div>
              <div><b>Commune:</b> ${lieu.commune} (${lieu.code_postal})</div>
            </div>
          </div>
        `);
        lieuxLayer.addLayer(marker);
      });

      map.addLayer(garesLayer);
      map.addLayer(lieuxLayer);

      const affichageSelect = document.getElementById("affichage");
      affichageSelect.addEventListener("change", (e) => {
        const mode = e.target.value;

        map.removeLayer(garesLayer);
        map.removeLayer(lieuxLayer);

        if (mode === "both" || mode === "gares") {
          map.addLayer(garesLayer);
        }
        if (mode === "both" || mode === "tourisme") {
          map.addLayer(lieuxLayer);
        }
      });


    });
  </script>
</Layout>
